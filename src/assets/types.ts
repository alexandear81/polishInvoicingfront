// Code generated by xgen. DO NOT EDIT.

// TKodyKrajowUE is IRLANDIA PÓŁNOCNA
export enum TKodyKrajowUE {
	AT = 'AT',
	BE = 'BE',
	BG = 'BG',
	CY = 'CY',
	CZ = 'CZ',
	DK = 'DK',
	EE = 'EE',
	FI = 'FI',
	FR = 'FR',
	DE = 'DE',
	EL = 'EL',
	HR = 'HR',
	HU = 'HU',
	IE = 'IE',
	IT = 'IT',
	LV = 'LV',
	LT = 'LT',
	LU = 'LU',
	MT = 'MT',
	NL = 'NL',
	PL = 'PL',
	PT = 'PT',
	RO = 'RO',
	SK = 'SK',
	SI = 'SI',
	ES = 'ES',
	SE = 'SE',
	XI = 'XI',
}

// TKodWaluty is DOLAR ZIMBABWE
export enum TKodWaluty {
	AED = 'AED',
	AFN = 'AFN',
	ALL = 'ALL',
	AMD = 'AMD',
	ANG = 'ANG',
	AOA = 'AOA',
	ARS = 'ARS',
	AUD = 'AUD',
	AWG = 'AWG',
	AZN = 'AZN',
	BAM = 'BAM',
	BBD = 'BBD',
	BDT = 'BDT',
	BGN = 'BGN',
	BHD = 'BHD',
	BIF = 'BIF',
	BMD = 'BMD',
	BND = 'BND',
	BOB = 'BOB',
	BOV = 'BOV',
	BRL = 'BRL',
	BSD = 'BSD',
	BTN = 'BTN',
	BWP = 'BWP',
	BYN = 'BYN',
	BZD = 'BZD',
	CAD = 'CAD',
	CDF = 'CDF',
	CHE = 'CHE',
	CHF = 'CHF',
	CHW = 'CHW',
	CLF = 'CLF',
	CLP = 'CLP',
	CNY = 'CNY',
	COP = 'COP',
	COU = 'COU',
	CRC = 'CRC',
	CUC = 'CUC',
	CUP = 'CUP',
	CVE = 'CVE',
	CZK = 'CZK',
	DJF = 'DJF',
	DKK = 'DKK',
	DOP = 'DOP',
	DZD = 'DZD',
	EGP = 'EGP',
	ERN = 'ERN',
	ETB = 'ETB',
	EUR = 'EUR',
	FJD = 'FJD',
	FKP = 'FKP',
	GBP = 'GBP',
	GEL = 'GEL',
	GGP = 'GGP',
	GHS = 'GHS',
	GIP = 'GIP',
	GMD = 'GMD',
	GNF = 'GNF',
	GTQ = 'GTQ',
	GYD = 'GYD',
	HKD = 'HKD',
	HNL = 'HNL',
	HRK = 'HRK',
	HTG = 'HTG',
	HUF = 'HUF',
	IDR = 'IDR',
	ILS = 'ILS',
	IMP = 'IMP',
	INR = 'INR',
	IQD = 'IQD',
	IRR = 'IRR',
	ISK = 'ISK',
	JEP = 'JEP',
	JMD = 'JMD',
	JOD = 'JOD',
	JPY = 'JPY',
	KES = 'KES',
	KGS = 'KGS',
	KHR = 'KHR',
	KMF = 'KMF',
	KPW = 'KPW',
	KRW = 'KRW',
	KWD = 'KWD',
	KYD = 'KYD',
	KZT = 'KZT',
	LAK = 'LAK',
	LBP = 'LBP',
	LKR = 'LKR',
	LRD = 'LRD',
	LSL = 'LSL',
	LYD = 'LYD',
	MAD = 'MAD',
	MDL = 'MDL',
	MGA = 'MGA',
	MKD = 'MKD',
	MMK = 'MMK',
	MNT = 'MNT',
	MOP = 'MOP',
	MRU = 'MRU',
	MUR = 'MUR',
	MVR = 'MVR',
	MWK = 'MWK',
	MXN = 'MXN',
	MXV = 'MXV',
	MYR = 'MYR',
	MZN = 'MZN',
	NAD = 'NAD',
	NGN = 'NGN',
	NIO = 'NIO',
	NOK = 'NOK',
	NPR = 'NPR',
	NZD = 'NZD',
	OMR = 'OMR',
	PAB = 'PAB',
	PEN = 'PEN',
	PGK = 'PGK',
	PHP = 'PHP',
	PKR = 'PKR',
	PLN = 'PLN',
	PYG = 'PYG',
	QAR = 'QAR',
	RON = 'RON',
	RSD = 'RSD',
	RUB = 'RUB',
	RWF = 'RWF',
	SAR = 'SAR',
	SBD = 'SBD',
	SCR = 'SCR',
	SDG = 'SDG',
	SEK = 'SEK',
	SGD = 'SGD',
	SHP = 'SHP',
	SLL = 'SLL',
	SOS = 'SOS',
	SRD = 'SRD',
	SSP = 'SSP',
	STN = 'STN',
	SVC = 'SVC',
	SYP = 'SYP',
	SZL = 'SZL',
	THB = 'THB',
	TJS = 'TJS',
	TMT = 'TMT',
	TND = 'TND',
	TOP = 'TOP',
	TRY = 'TRY',
	TTD = 'TTD',
	TWD = 'TWD',
	TZS = 'TZS',
	UAH = 'UAH',
	UGX = 'UGX',
	USD = 'USD',
	USN = 'USN',
	UYI = 'UYI',
	UYU = 'UYU',
	UYW = 'UYW',
	UZS = 'UZS',
	VES = 'VES',
	VND = 'VND',
	VUV = 'VUV',
	WST = 'WST',
	XAF = 'XAF',
	XAG = 'XAG',
	XAU = 'XAU',
	XBA = 'XBA',
	XBB = 'XBB',
	XBC = 'XBC',
	XBD = 'XBD',
	XCD = 'XCD',
	XCG = 'XCG',
	XDR = 'XDR',
	XOF = 'XOF',
	XPD = 'XPD',
	XPF = 'XPF',
	XPT = 'XPT',
	XSU = 'XSU',
	XUA = 'XUA',
	XXX = 'XXX',
	YER = 'YER',
	ZAR = 'ZAR',
	ZMW = 'ZMW',
	ZWL = 'ZWL',
}

// TKodFormularza is Symbol wzoru formularza
export enum TKodFormularza {
	FA = 'FA',
}

// KodFormularza ...
export class KodFormularza {
	KodSystemowyAttr: string;
	WersjaSchemyAttr: string;
	Value: string;
}

// TNaglowek is Nagłówek
export class TNaglowek {
	KodFormularza: KodFormularza;
	WariantFormularza: any;
	DataWytworzeniaFa: any;
	SystemInfo: string;
}

// TAdres is Kod Kraju [Country Code]
export class TAdres {
	KodKraju: TKodKraju;
	AdresL1: any;
	AdresL2: any;
	GLN: any;
}

// TKwotowy is Wartość numeryczna 18 znaków max, w tym 2 znaki po przecinku
export type TKwotowy = any;

// TKwotowy2 is Wartość numeryczna 22 znaki max, w tym 8 znaków po przecinku
export type TKwotowy2 = any;

// TNaturalny is Liczby naturalne większe od zera
export type TNaturalny = number;

// TZnakowy is Typ znakowy ograniczony do 256 znaków
export type TZnakowy = string;

// TZnakowy2 is Typ znakowy ograniczony do 256 znaków
export type TZnakowy2 = string;

// TZnakowy20 is Typ znakowy ograniczony do 20 znaków
export type TZnakowy20 = string;

// TZnakowy50 is Typ znakowy ograniczony do 50 znaków
export type TZnakowy50 = string;

// TZnakowy512 is Typ znakowy ograniczony do 512 znaków
export type TZnakowy512 = string;

// TNumerKSeF is Numer identyfikujący fakturę w Krajowym Systemie e-Faktur (KSeF)
export type TNumerKSeF = string;

// TKluczWartosc is Wartość
export class TKluczWartosc {
	NrWiersza: number;
	Klucz: string;
	Wartosc: string;
}

// TIlosci is Typ wykorzystywany do określenia ilości. Wartość numeryczna 22 znaki max, w tym 6 po przecinku
export type TIlosci = any;

// TData is Data zdarzenia w okresie od 2016-07-01 do 2050-01-01
export type TData = string;

// TDataT is Data zdarzenia w okresie od 2006-01-01 do 2050-01-01
export type TDataT = string;

// TDataU is Data zdarzenia w okresie od 1990-01-01 do 2050-01-01
export type TDataU = string;

// TDataCzas is Data i czas zdarzenia w okresie od 01.10.2021T00:00:00Z do 01.01.2050T23:59:59Z
export type TDataCzas = any;

// TNrVatUE is Numer Identyfikacyjny VAT kontrahenta UE
export type TNrVatUE = string;

// TNIPIdWew is Identyfikator wewnętrzny
export type TNIPIdWew = string;

// TNrRB is Numer rachunku
export type TNrRB = string;

// SWIFT_Type is Kod SWIFT
export type SWIFT_Type = string;

// TFormaPlatnosci is Mobilna
export enum TFormaPlatnosci {
	Enum1 = '1',
	Enum2 = '2',
	Enum3 = '3',
	Enum4 = '4',
	Enum5 = '5',
	Enum6 = '6',
	Enum7 = '7',
}

// TLadunek is Worek
export enum TLadunek {
	Enum1 = '1',
	Enum2 = '2',
	Enum3 = '3',
	Enum4 = '4',
	Enum5 = '5',
	Enum6 = '6',
	Enum7 = '7',
	Enum8 = '8',
	Enum9 = '9',
	Enum10 = '10',
	Enum11 = '11',
	Enum12 = '12',
	Enum13 = '13',
	Enum14 = '14',
	Enum15 = '15',
	Enum16 = '16',
	Enum17 = '17',
	Enum18 = '18',
	Enum19 = '19',
	Enum20 = '20',
}

// TProcentowy is Wartość procentowa z dokładnością do 6 miejsc po przecinku
export type TProcentowy = any;

// TRachunekWlasnyBanku is Rachunek banku lub rachunek spółdzielczej kasy oszczędnościowo-kredytowej prowadzony przez ten bank lub tę kasę w ramach gospodarki własnej, niebędący rachunkiem rozliczeniowym
export enum TRachunekWlasnyBanku {
	Enum1 = '1',
	Enum2 = '2',
	Enum3 = '3',
}

// TRachunekBankowy is Opis rachunku
export class TRachunekBankowy {
	NrRB: string;
	SWIFT: string;
	RachunekWlasnyBanku: any;
	NazwaBanku: string;
	OpisRachunku: string;
}

// TPodmiot1 is Imię i nazwisko lub nazwa
export class TPodmiot1 {
	NIP: TNrNIP;
	Nazwa: string;
}

// TPodmiot2 is Imię i nazwisko lub nazwa
export class TPodmiot2 {
	NIP: TNrNIP;
	KodUE: string;
	NrVatUE: string;
	KodKraju: TKodKraju;
	NrID: any;
	BrakID: TWybor1;
	Nazwa: string;
}

// TPodmiot3 is Imię i nazwisko lub nazwa
export class TPodmiot3 {
	NIP: TNrNIP;
	IDWew: string;
	KodUE: string;
	NrVatUE: string;
	KodKraju: TKodKraju;
	NrID: string;
	BrakID: TWybor1;
	Nazwa: string;
}

// TStatusInfoPodatnika is Przedsiębiorstwo w spadku
export enum TStatusInfoPodatnika {
	Enum1 = '1',
	Enum2 = '2',
	Enum3 = '3',
	Enum4 = '4',
}

// TRolaPodmiotuUpowaznionego is Przedstawiciel podatkowy - w przypadku gdy na fakturze występują dane przedstawiciela podatkowego, o którym mowa w art. 18a - 18d ustawy
export enum TRolaPodmiotuUpowaznionego {
	Enum1 = '1',
	Enum2 = '2',
	Enum3 = '3',
}

// TRolaPodmiotu3 is Pracownik
export enum TRolaPodmiotu3 {
	Enum1 = '1',
	Enum2 = '2',
	Enum3 = '3',
	Enum4 = '4',
	Enum5 = '5',
	Enum6 = '6',
	Enum7 = '7',
	Enum8 = '8',
	Enum9 = '9',
	Enum10 = '10',
	Enum11 = '11',
}

// TNumerTelefonu is Numer telefonu
export type TNumerTelefonu = string;

// TRodzajFaktury is Faktura korygująca fakturę wystawioną w związku z art. 106f ust. 3 ustawy
export enum TRodzajFaktury {
	VAT = 'VAT',
	KOR = 'KOR',
	ZAL = 'ZAL',
	ROZ = 'ROZ',
	UPR = 'UPR',
	KOR_ZAL = 'KOR_ZAL',
	KOR_ROZ = 'KOR_ROZ',
}

// TTypKorekty is Korekta skutkująca w dacie innej, w tym gdy dla różnych pozycji faktury korygującej daty te są różne
export enum TTypKorekty {
	Enum1 = '1',
	Enum2 = '2',
	Enum3 = '3',
}

// TStawkaPodatku is niepodlegajace opodatkowaniu na terytorium kraju, świadczenie usług o których mowa w art. 100 ust. 1 pkt 4 ustawy
export enum TStawkaPodatku {
	23 = '23',
	22 = '22',
	8 = '8',
	7 = '7',
	5 = '5',
	4 = '4',
	3 = '3',
	0 KR = '0 KR',
	0 WDT = '0 WDT',
	0 EX = '0 EX',
	zw = 'zw',
	oo = 'oo',
	np I = 'np I',
	np II = 'np II',
}

// TOznaczenieProcedury is Oznaczenie dotyczące procedury, o której mowa w § 10 ust. 4 pkt 12 rozporządzenia w sprawie szczegółowego zakresu danych zawartych w deklaracjach podatkowych i w ewidencji w zakresie podatku od towarów i usług
export enum TOznaczenieProcedury {
	WSTO_EE = 'WSTO_EE',
	IED = 'IED',
	TT_D = 'TT_D',
	I_42 = 'I_42',
	I_63 = 'I_63',
	B_SPV = 'B_SPV',
	B_SPV_DOSTAWA = 'B_SPV_DOSTAWA',
	B_MPV_PROWIZJA = 'B_MPV_PROWIZJA',
}

// TOznaczenieProceduryZ is Oznaczenie dotyczące procedury, o której mowa w § 10 ust. 4 pkt 12 rozporządzenia w sprawie szczegółowego zakresu danych zawartych w deklaracjach podatkowych i w ewidencji w zakresie podatku od towarów i usług
export enum TOznaczenieProceduryZ {
	WSTO_EE = 'WSTO_EE',
	IED = 'IED',
	TT_D = 'TT_D',
	B_SPV = 'B_SPV',
	B_SPV_DOSTAWA = 'B_SPV_DOSTAWA',
	B_MPV_PROWIZJA = 'B_MPV_PROWIZJA',
}

// TGTU is Świadczenie usług, o których mowa w § 10 ust. 3 pkt 2 lit. c rozporządzenia w sprawie szczegółowego zakresu danych zawartych w deklaracjach podatkowych i w ewidencji w zakresie podatku od towarów i usług
export enum TGTU {
	GTU_01 = 'GTU_01',
	GTU_02 = 'GTU_02',
	GTU_03 = 'GTU_03',
	GTU_04 = 'GTU_04',
	GTU_05 = 'GTU_05',
	GTU_06 = 'GTU_06',
	GTU_07 = 'GTU_07',
	GTU_08 = 'GTU_08',
	GTU_09 = 'GTU_09',
	GTU_10 = 'GTU_10',
	GTU_11 = 'GTU_11',
	GTU_12 = 'GTU_12',
	GTU_13 = 'GTU_13',
}

// TGLN is Typ Globalnego Numeru Lokalizacyjnego
export type TGLN = string;

// TRodzajTransportu is Żegluga śródlądowa
export enum TRodzajTransportu {
	Enum1 = '1',
	Enum2 = '2',
	Enum3 = '3',
	Enum4 = '4',
	Enum5 = '5',
	Enum7 = '7',
	Enum8 = '8',
}

// AdresKoresp is Adres korespondencyjny podatnika
export class AdresKoresp {
}

// DaneKontaktowe is Dane kontaktowe podatnika
export class DaneKontaktowe {
	Email: TAdresEmail;
	Telefon: string;
}

// Podmiot1 is Numer EORI podatnika (sprzedawcy)
export class Podmiot1 {
	PrefiksPodatnika: string;
	NrEORI: string;
	DaneIdentyfikacyjne: any;
	Adres: any;
	AdresKoresp: any;
	DaneKontaktowe: Array<any>;
	StatusInfoPodatnika: any;
}

// Podmiot2 is Dane nabywcy
export class Podmiot2 {
	NrEORI: string;
	DaneIdentyfikacyjne: any;
	Adres: any;
	AdresKoresp: any;
	DaneKontaktowe: Array<any>;
	NrKlienta: string;
	IDNabywcy: any;
	JST: any;
	GV: any;
}

// Podmiot3 is Dane podmiotu/-ów trzeciego/-ich (innego/-ych niż sprzedawca i nabywca wymieniony w części Podmiot2), związanego/-ych z fakturą
export class Podmiot3 {
	IDNabywcy: any;
	NrEORI: string;
	DaneIdentyfikacyjne: any;
	Adres: any;
	AdresKoresp: any;
	DaneKontaktowe: Array<any>;
	Rola: any;
	RolaInna: TWybor1;
	OpisRoli: string;
	Udzial: any;
	NrKlienta: string;
}

// PodmiotUpowazniony is Dane podmiotu upoważnionego, związanego z fakturą
export class PodmiotUpowazniony {
	NrEORI: string;
	DaneIdentyfikacyjne: any;
	Adres: any;
	AdresKoresp: any;
	DaneKontaktowe: Array<any>;
	RolaPU: any;
}

// OkresFa is Okres, którego dotyczy faktura - w przypadkach, o których mowa w art. 19a ust. 3 zdanie pierwsze i ust. 4 oraz ust. 5 pkt 4 ustawy
export class OkresFa {
	P_6_Od: string;
	P_6_Do: string;
}

// Zwolnienie ...
export class Zwolnienie {
	P_19: TWybor1;
	P_19A: string;
	P_19B: string;
	P_19C: string;
	P_19N: TWybor1;
}

// NowySrodekTransportu ...
export class NowySrodekTransportu {
	P_22A: string;
	P_NrWierszaNST: number;
	P_22BMK: string;
	P_22BMD: string;
	P_22BK: string;
	P_22BNR: string;
	P_22BRP: string;
	P_22B: string;
	P_22B1: string;
	P_22B2: string;
	P_22B3: string;
	P_22B4: string;
	P_22BT: string;
	P_22C: string;
	P_22C1: string;
	P_22D: string;
	P_22D1: string;
}

// NoweSrodkiTransportu ...
export class NoweSrodkiTransportu {
	P_22: TWybor1;
	P_42_5: TWybor1_2;
	NowySrodekTransportu: Array<any>;
	P_22N: TWybor1;
}

// PMarzy ...
export class PMarzy {
	P_PMarzy: TWybor1;
	P_PMarzy_2: TWybor1;
	P_PMarzy_3_1: TWybor1;
	P_PMarzy_3_2: TWybor1;
	P_PMarzy_3_3: TWybor1;
	P_PMarzyN: TWybor1;
}

// Adnotacje is Inne adnotacje na fakturze
export class Adnotacje {
	P_16: TWybor1_2;
	P_17: TWybor1_2;
	P_18: TWybor1_2;
	P_18A: TWybor1_2;
	Zwolnienie: any;
	NoweSrodkiTransportu: any;
	P_23: TWybor1_2;
	PMarzy: any;
}

// DaneFaKorygowanej is Dane faktury korygowanej
export class DaneFaKorygowanej {
	DataWystFaKorygowanej: string;
	NrFaKorygowanej: string;
	NrKSeF: TWybor1;
	NrKSeFFaKorygowanej: string;
	NrKSeFN: TWybor1;
}

// Podmiot1K is W przypadku korekty danych sprzedawcy należy podać pełne dane sprzedawcy występujące na fakturze korygowanej. Pole nie dotyczy przypadku korekty błędnego NIP występującego na fakturze pierwotnej - wówczas wymagana jest korekta faktury do wartości zerowych
export class Podmiot1K {
	PrefiksPodatnika: string;
	DaneIdentyfikacyjne: any;
	Adres: any;
}

// Podmiot2K is W przypadku korekty danych nabywcy występującego jako Podmiot2 lub dodatkowego nabywcy występującego jako Podmiot3 należy podać pełne dane tego podmiotu występujące na fakturze korygowanej. Korekcie nie podlegają błędne numery NIP identyfikujące nabywcę oraz dodatkowego nabywcę - wówczas wymagana jest korekta faktury do wartości zerowych. W przypadku korygowania pozostałych danych nabywcy lub dodatkowego nabywcy wskazany numer identyfikacyjny ma być tożsamy z numerem w części Podmiot2 względnie Podmiot3 faktury korygującej
export class Podmiot2K {
	DaneIdentyfikacyjne: any;
	Adres: any;
	IDNabywcy: any;
}

// ZaliczkaCzesciowa is Dane dla przypadków faktur dokumentujących otrzymanie więcej niż jednej płatności, o której mowa w art. 106b ust. 1 pkt 4 ustawy. W przypadku, gdy faktura, o której mowa w art. 106f ust. 3 ustawy dokumentuje jednocześnie otrzymanie części zapłaty przed dokonaniem czynności, różnica kwoty w polu P_15 i sumy poszczególnych pól P_15Z stanowi kwotę pozostałą ponad płatności otrzymane przed wykonaniem czynności udokumentowanej fakturą
export class ZaliczkaCzesciowa {
	P_6Z: string;
	P_15Z: any;
	KursWalutyZW: any;
}

// FakturaZaliczkowa is Numery faktur zaliczkowych lub ich numery KSeF, jeśli zostały wystawione z użyciem KSeF
export class FakturaZaliczkowa {
	NrKSeFZN: TWybor1;
	NrFaZaliczkowej: string;
	NrKSeFFaZaliczkowej: string;
}

// FaWiersz is Szczegółowe pozycje faktury w walucie, w której wystawiono fakturę - węzeł opcjonalny dla faktury zaliczkowej, faktury korygującej fakturę zaliczkową oraz faktur korygujących dotyczących wszystkich dostaw towarów lub usług dokonanych lub świadczonych w danym okresie, o których mowa w art. 106j ust. 3 ustawy, dla których należy podać dane dotyczące opustu lub obniżki w podziale na stawki podatku i procedury w części Fa. W przypadku faktur korygujących, o których mowa w art. 106j ust. 3 ustawy, gdy opust lub obniżka ceny odnosi się do części dostaw towarów lub usług dokonanych lub świadczonych w danym okresie w części FaWiersz należy podać nazwy (rodzaje) towarów lub usług objętych korektą. W przypadku faktur, o których mowa w art. 106f ust. 3 ustawy, należy wykazać pełne wartości zamówienia lub umowy. W przypadku faktur korygujących pozycje faktury (w tym faktur korygujących faktury, o których mowa w art. 106f ust. 3 ustawy, jeśli korekta dotyczy wartości zamówienia) należy wykazać różnice wynikające z korekty poszczególnych pozycji lub dane pozycji korygowanych wg stanu przed korektą i po korekcie jako osobne wiersze. W przypadku faktur korygujących faktury, o których mowa w art. 106f ust. 3 ustawy, jeśli korekta nie dotyczy wartości zamówienia i jednocześnie zmienia wysokość podstawy opodatkowania lub podatku, należy wprowadzić zapis wg stanu przed korektą i zapis wg stanu po korekcie w celu potwierdzenia braku zmiany wartości danej pozycji faktury
export class FaWiersz {
	NrWierszaFa: number;
	UU_ID: string;
	P_6A: string;
	P_7: string;
	Indeks: string;
	GTIN: string;
	PKWiU: string;
	CN: string;
	PKOB: string;
	P_8A: string;
	P_8B: any;
	P_9A: any;
	P_9B: any;
	P_10: any;
	P_11: any;
	P_11A: any;
	P_11Vat: any;
	P_12: string;
	P_12_XII: number;
	P_12_Zal_15: TWybor1;
	KwotaAkcyzy: any;
	GTU: string;
	Procedura: string;
	KursWaluty: any;
	StanPrzed: TWybor1;
}

// Obciazenia is Obciążenia
export class Obciazenia {
	Kwota: any;
	Powod: string;
}

// Odliczenia is Odliczenia
export class Odliczenia {
	Kwota: any;
	Powod: string;
}

// Rozliczenie is Dodatkowe rozliczenia na fakturze
export class Rozliczenie {
	Obciazenia: Array<any>;
	SumaObciazen: any;
	Odliczenia: Array<any>;
	SumaOdliczen: any;
	DoZaplaty: any;
	DoRozliczenia: any;
}

// ZaplataCzesciowa is Dane zapłat częściowych
export class ZaplataCzesciowa {
	KwotaZaplatyCzesciowej: any;
	DataZaplatyCzesciowej: string;
	FormaPlatnosci: any;
	PlatnoscInna: TWybor1;
	OpisPlatnosci: string;
}

// TerminOpis is Opis terminu płatności
export class TerminOpis {
	Ilosc: number;
	Jednostka: string;
	ZdarzeniePoczatkowe: string;
}

// TerminPlatnosci ...
export class TerminPlatnosci {
	Termin: string;
	TerminOpis: any;
}

// Skonto is Skonto
export class Skonto {
	WarunkiSkonta: string;
	WysokoscSkonta: string;
}

// Platnosc is Warunki płatności
export class Platnosc {
	Zaplacono: TWybor1;
	DataZaplaty: string;
	ZnacznikZaplatyCzesciowej: TWybor1_2;
	ZaplataCzesciowa: Array<any>;
	TerminPlatnosci: Array<any>;
	FormaPlatnosci: any;
	PlatnoscInna: TWybor1;
	OpisPlatnosci: string;
	RachunekBankowy: Array<any>;
	RachunekBankowyFaktora: Array<any>;
	Skonto: any;
	LinkDoPlatnosci: any;
	IPKSeF: any;
}

// Umowy ...
export class Umowy {
	DataUmowy: string;
	NrUmowy: string;
}

// Zamowienia ...
export class Zamowienia {
	DataZamowienia: string;
	NrZamowienia: string;
}

// Przewoznik ...
export class Przewoznik {
	DaneIdentyfikacyjne: any;
	AdresPrzewoznika: any;
}

// Transport ...
export class Transport {
	RodzajTransportu: any;
	TransportInny: TWybor1;
	OpisInnegoTransportu: string;
	Przewoznik: any;
	NrZleceniaTransportu: string;
	OpisLadunku: any;
	LadunekInny: TWybor1;
	OpisInnegoLadunku: string;
	JednostkaOpakowania: string;
	DataGodzRozpTransportu: string;
	DataGodzZakTransportu: string;
	WysylkaZ: any;
	WysylkaPrzez: Array<any>;
	WysylkaDo: any;
}

// WarunkiTransakcji is Warunki transakcji, o ile występują
export class WarunkiTransakcji {
	Umowy: Array<any>;
	Zamowienia: Array<any>;
	NrPartiiTowaru: string;
	WarunkiDostawy: string;
	KursUmowny: any;
	WalutaUmowna: string;
	Transport: Array<any>;
	PodmiotPosredniczacy: TWybor1;
}

// ZamowienieWiersz is Szczegółowe pozycje zamówienia lub umowy w walucie, w której wystawiono fakturę zaliczkową
export class ZamowienieWiersz {
	NrWierszaZam: number;
	UU_IDZ: string;
	P_7Z: string;
	IndeksZ: string;
	GTINZ: string;
	PKWiUZ: string;
	CNZ: string;
	PKOBZ: string;
	P_8AZ: string;
	P_8BZ: any;
	P_9AZ: any;
	P_11NettoZ: any;
	P_11VatZ: any;
	P_12Z: string;
	P_12Z_XII: number;
	P_12Z_Zal_15: TWybor1;
	GTUZ: string;
	ProceduraZ: string;
	KwotaAkcyzyZ: any;
	StanPrzedZ: TWybor1;
}

// Zamowienie is Zamówienie lub umowa, o których mowa w art. 106f ust. 1 pkt 4 ustawy (dla faktur zaliczkowych), w walucie, w której wystawiono fakturę zaliczkową. W przypadku faktury korygującej fakturę zaliczkową należy wykazać różnice wynikające z korekty poszczególnych pozycji zamówienia lub umowy lub dane pozycji korygowanych wg stanu przed korektą i po korekcie jako osobne wiersze, jeśli korekta dotyczy wartości zamówienia lub umowy. W przypadku faktur korygujących faktury zaliczkowe, jeśli korekta nie dotyczy wartości zamówienia lub umowy i jednocześnie zmienia wysokość podstawy opodatkowania lub podatku, należy wprowadzić zapis wg stanu przed korektą i zapis wg stanu po korekcie w celu potwierdzenia braku zmiany wartości danej pozycji
export class Zamowienie {
	WartoscZamowienia: any;
	ZamowienieWiersz: Array<any>;
}

// Fa is Na podstawie art. 106a - 106q ustawy. Pola dotyczące wartości sprzedaży i podatku wypełnia się w walucie, w której wystawiono fakturę, z wyjątkiem pól dotyczących podatku przeliczonego zgodnie z przepisami działu VI w związku z art. 106e ust. 11 ustawy. W przypadku wystawienia faktury korygującej wypełnia się wszystkie pola wg stanu po korekcie, a pola dotyczące podstaw opodatkowania, podatku oraz należności ogółem wypełnia się poprzez różnicę
export class Fa {
	KodWaluty: string;
	P_1: string;
	P_1M: string;
	P_2: string;
	WZ: string;
	P_6: string;
	OkresFa: any;
	P_13_1: any;
	P_14_1: any;
	P_14_1W: any;
	P_13_2: any;
	P_14_2: any;
	P_14_2W: any;
	P_13_3: any;
	P_14_3: any;
	P_14_3W: any;
	P_13_4: any;
	P_14_4: any;
	P_14_4W: any;
	P_13_5: any;
	P_14_5: any;
	P_13_6_1: any;
	P_13_6_2: any;
	P_13_6_3: any;
	P_13_7: any;
	P_13_8: any;
	P_13_9: any;
	P_13_10: any;
	P_13_11: any;
	P_15: any;
	KursWalutyZ: any;
	Adnotacje: any;
	RodzajFaktury: string;
	PrzyczynaKorekty: string;
	TypKorekty: any;
	DaneFaKorygowanej: Array<any>;
	OkresFaKorygowanej: string;
	NrFaKorygowany: string;
	Podmiot1K: any;
	Podmiot2K: Array<any>;
	P_15ZK: any;
	KursWalutyZK: any;
	ZaliczkaCzesciowa: Array<any>;
	FP: TWybor1;
	TP: TWybor1;
	DodatkowyOpis: Array<any>;
	FakturaZaliczkowa: Array<any>;
	ZwrotAkcyzy: TWybor1;
	FaWiersz: Array<any>;
	Rozliczenie: any;
	Platnosc: any;
	WarunkiTransakcji: any;
	Zamowienie: any;
}

// Informacje is Pozostałe dane
export class Informacje {
	StopkaFaktury: TTekstowy;
}

// Rejestry is Numery podmiotu lub grupy podmiotów w innych rejestrach i bazach danych
export class Rejestry {
	PelnaNazwa: string;
	KRS: TNrKRS;
	REGON: TNrREGON;
	BDO: any;
}

// Stopka is Pozostałe dane na fakturze
export class Stopka {
	Informacje: Array<any>;
	Rejestry: Array<any>;
}

// MetaDane is Dane opisowe
export class MetaDane {
	ZKlucz: string;
	ZWartosc: string;
}

// Tekst is Część tekstowa bloku danych
export class Tekst {
	Akapit: string;
}

// TMetaDane is Dane opisowe dotyczące tabeli
export class TMetaDane {
	TKlucz: string;
	TWartosc: string;
}

// NKom is Zawartość pola
export class NKom {
	Value: string;
}

// Kol ...
export class Kol {
	TypAttr: string;
	NKom: any;
}

// Wiersz is Wiersze tabeli
export class Wiersz {
	WKom: string;
}

// Suma is Podsumowania tabeli
export class Suma {
	SKom: string;
}

// Tabela is Tabele
export class Tabela {
	TMetaDane: Array<any>;
	Opis: string;
	TNaglowek: any;
	Wiersz: Array<any>;
	Suma: any;
}

// BlokDanych is Szczegółowe dane załącznika
export class BlokDanych {
	ZNaglowek: string;
	MetaDane: Array<any>;
	Tekst: any;
	Tabela: Array<any>;
}

// Zalacznik is Załącznik do faktury VAT
export class Zalacznik {
	BlokDanych: Array<any>;
}

// Faktura is Faktura VAT
export class Faktura {
	Naglowek: any;
	Podmiot1: any;
	Podmiot2: any;
	Podmiot3: Array<any>;
	PodmiotUpowazniony: any;
	Fa: any;
	Stopka: any;
	Zalacznik: any;
}
